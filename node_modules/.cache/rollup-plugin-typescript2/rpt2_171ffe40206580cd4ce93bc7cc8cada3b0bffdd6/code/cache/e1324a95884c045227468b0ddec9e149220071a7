{"code":"import { hasChanged, isArray, isObject } from '@vue/shared/src';\r\nimport { track, trigger } from './effect';\r\nimport { reactive } from './reactive';\r\nexport function ref(value) {\r\n    // 将普通类型 变成一个对象 , 可以是对象 但是一般情况下是对象直接用reactive更合理\r\n    return createRef(value);\r\n}\r\n// ref 和 reactive的区别 reactive内部采用proxy  ref中内部使用的是defineProperty\r\nexport function shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\n// 后续 看vue的源码 基本上都是高阶函数 做了类似柯里化的功能\r\nconst convert = (val) => (isObject(val) ? reactive(val) : val);\r\n// beta 版本 之前的版本ref 就是个对象 ，由于对象不方便扩展 改成了类 (ts中实现类的话 私有属性必须要先声明才能使用)\r\nclass RefImpl {\r\n    rawValue;\r\n    shallow;\r\n    _value; //表示 声明了一个_value属性 但是没有赋值\r\n    __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(rawValue, shallow) {\r\n        this.rawValue = rawValue;\r\n        this.shallow = shallow;\r\n        // 参数中前面增加修饰符 标识此属性放到了实例上\r\n        this._value = shallow ? rawValue : convert(rawValue); // 如果是深度 需要把里面的都变成响应式的\r\n    }\r\n    // 类的属性访问器\r\n    get value() {\r\n        // 代理 取值取value 会帮我们代理到 _value上\r\n        track(this, 0 /* TrackOpTypes.GET */, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(newValue, this.rawValue)) {\r\n            // 判断老值和新值是否有变化\r\n            this.rawValue = newValue; // 新值会作为老值 用于下次比对\r\n            this._value = this.shallow ? newValue : convert(newValue);\r\n            trigger(this, 1 /* TriggerOrTypes.SET */, 'value', newValue);\r\n        }\r\n    }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow); // 借助类的属性访问器\r\n}\r\nclass ObjectRefImpl {\r\n    target;\r\n    key;\r\n    __v_isRef = true;\r\n    constructor(target, key) {\r\n        this.target = target;\r\n        this.key = key;\r\n    }\r\n    get value() {\r\n        // 代理\r\n        return this.target[this.key]; // 如果原对象是响应式的就会依赖收集\r\n    }\r\n    set value(newValue) {\r\n        this.target[this.key] = newValue; // 如果原来对象是响应式的 那么就会触发更新\r\n    }\r\n}\r\n// promisify\r\n// promisifyAll\r\n// 将某一个key对应的值 转化成ref\r\nexport function toRef(target, key) {\r\n    // 可以把一个对象的值转化成 ref类型\r\n    return new ObjectRefImpl(target, key);\r\n}\r\nexport function toRefs(object) {\r\n    // object 可能传递的是一个数组 或者对象\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (let key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\n// ref其他方法实现 计算属性\r\n// effect和reactive和ref的关系\r\n// computed源码调试\r\n// vue3的渲染原理 diff算法\r\n//# sourceMappingURL=ref.js.map","references":["/Users/pangjianfeng/code/pf-vue3-source/vue3-render/packages/shared/src/index.ts","/Users/pangjianfeng/code/pf-vue3-source/vue3-render/packages/reactivity/src/effect.ts","/Users/pangjianfeng/code/pf-vue3-source/vue3-render/packages/reactivity/src/operators.ts","/Users/pangjianfeng/code/pf-vue3-source/vue3-render/packages/reactivity/src/reactive.ts"],"map":"{\"version\":3,\"file\":\"ref.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../packages/reactivity/src/ref.ts\"],\"names\":[],\"mappings\":\"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\"}"}
