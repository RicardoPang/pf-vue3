{"code":"let queue = [];\r\nexport function queueJob(job) {\r\n    if (!queue.includes(job)) {\r\n        queue.push(job);\r\n        queueFlush();\r\n    }\r\n}\r\nlet isFlushPending = false;\r\nfunction queueFlush() {\r\n    if (!isFlushPending) {\r\n        isFlushPending = true;\r\n        Promise.resolve().then(flushJobs);\r\n    }\r\n}\r\nfunction flushJobs() {\r\n    isFlushPending = false;\r\n    // 清空时  我们需要根据调用的顺序依次刷新  , 保证先刷新父在刷新子\r\n    queue.sort((a, b) => a.id - b.id);\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const job = queue[i];\r\n        job();\r\n    }\r\n    queue.length = 0;\r\n}\r\n//# sourceMappingURL=scheduler.js.map","references":[],"map":"{\"version\":3,\"file\":\"scheduler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../packages/runtime-core/src/scheduler.ts\"],\"names\":[],\"mappings\":\"AAAA,IAAI,KAAK,GAAG,EAAE,CAAC;AACf,MAAM,UAAU,QAAQ,CAAC,GAAG;IAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,UAAU,EAAE,CAAC;KACd;AACH,CAAC;AACD,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,SAAS,UAAU;IACjB,IAAI,CAAC,cAAc,EAAE;QACnB,cAAc,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACnC;AACH,CAAC;AAED,SAAS,SAAS;IAChB,cAAc,GAAG,KAAK,CAAC;IACvB,qCAAqC;IACrC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACrB,GAAG,EAAE,CAAC;KACP;IACD,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACnB,CAAC\"}"}
